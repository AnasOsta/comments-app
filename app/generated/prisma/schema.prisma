// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  password      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  likes    CommentLike[]
  accounts Account[]
  comments Comment[]

  // sessions      Session[]
  // Optional for WebAuthn support
  // Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Comment {
  id      String @id @default(cuid())
  content String // نص التعليق

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // علاقة الرد على تعليق
  parentId String? // إذا كان هذا التعليق رد على تعليق ثاني
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies") // الردود على هذا التعليق

  // نظام الإعجابات وعدم الإعجاب
  likes CommentLike[] // ← العلاقة مع الأصوات
  like  Int           @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CommentLike {
  id        String @id @default(cuid())
  userId    String
  commentId String
  value     Int // 1 للإعجاب، -1 لعدم الإعجاب

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, commentId]) // ⛔ يمنع المستخدم من التصويت مرتين لنفس التعليق
}
